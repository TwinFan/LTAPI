name: Build Linux / CMake
description: Build on Linux based on a CMake setup
author: TwinFan

inputs:                       
  baseDir:
    description: "Base folder (under check out dir) to base all build acitivities in, must end with slash if given"
    required: true
    default: ""
  pluginName:
    description: "Plugin's name, used as file name as required by X-Plane"
    required: true
  archFolder:
    description: "Subfolder in which the executable is placed, is based on architecture like 'lin_x64'"
    required: true
    default: lin_x64

outputs:
  xpl-file-name:
    description: Path to the resulting xpl file
    value: ${{ steps.return.outputs.xpl-file-name }}
  pdb-file-name:
    description: Path to the resulting .debug.zip file (debug symbol info)
    value: ${{ steps.return.outputs.pdb-file-name }}

runs:
  using: "composite"
  steps:
  - name: Install required libs   # We want Ninja and OpenGL libs
    shell: bash
    run: |
      sudo apt-get update -y
      sudo apt-get install -y ninja-build libglu1-mesa-dev freeglut3-dev mesa-common-dev
  - name: Prepare
    shell: bash
    run: |
      mkdir ${{ inputs.baseDir }}build-lin
  - name: CMake
    shell: bash
    run: |
      cd ${{ inputs.baseDir }}build-lin
      pwd
      cmake -G Ninja ..
  - name: Build
    shell: bash
    run: |
      cd ${{ inputs.baseDir }}build-lin
      pwd
      ninja
  - name: Test for Target
    shell: bash
    env:
      TARGET_XPL: ${{ inputs.baseDir }}build-lin/${{ inputs.archFolder }}/${{ inputs.pluginName }}.xpl
    run: |
      if [[ ! -f "$TARGET_XPL" ]]; then
        echo Expected target build not found: "$TARGET_XPL"
        exit 1
      fi
  - name: Extract symbol info
    shell: bash
    env:
      TARGET_XPL: ${{ inputs.baseDir }}build-lin/${{ inputs.archFolder }}/${{ inputs.pluginName }}.xpl
      TARGET_DBG: ${{ inputs.baseDir }}build-lin/${{ inputs.archFolder }}/${{ inputs.pluginName }}.xpl.debug
      TARGET_PDB: ${{ inputs.baseDir }}build-lin/${{ inputs.archFolder }}/${{ inputs.pluginName }}.xpl.debug.zip
    run: |
      objcopy --only-keep-debug "$TARGET_XPL" "$TARGET_DBG"
      strip --strip-debug --strip-unneeded "$TARGET_XPL"
      objcopy --add-gnu-debuglink="$TARGET_DBG" "$TARGET_XPL"
      zip -9 "$TARGET_PDB" "$TARGET_DBG"
  - name: Return Value
    id: return
    shell: bash
    env:
      TARGET_XPL: ${{ inputs.baseDir }}build-lin/${{ inputs.archFolder }}/${{ inputs.pluginName }}.xpl
      TARGET_PDB: ${{ inputs.baseDir }}build-lin/${{ inputs.archFolder }}/${{ inputs.pluginName }}.xpl.debug.zip
    run: |
      echo "xpl-file-name=$(echo $TARGET_XPL)" >> $GITHUB_OUTPUT
      echo "pdb-file-name=$(echo $TARGET_PDB)" >> $GITHUB_OUTPUT
